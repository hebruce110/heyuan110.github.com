<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rabbitmq on Bruce&#39;s Blog</title>
    <link>http://www.heyuan110.com/tags/rabbitmq/</link>
    <description>Recent content in rabbitmq on Bruce&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 02 Aug 2019 11:47:04 +0000</lastBuildDate><atom:link href="http://www.heyuan110.com/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>消息队列-RabbitMQ</title>
      <link>http://www.heyuan110.com/posts/middleware/2019-08-02-mq-rabbitmq/</link>
      <pubDate>Fri, 02 Aug 2019 11:47:04 +0000</pubDate>
      
      <guid>http://www.heyuan110.com/posts/middleware/2019-08-02-mq-rabbitmq/</guid>
      <description>前面文章《消息队列中间件选型》我们了解了消息队列技术选型，本文我们来学习开源消息队列RabbitMQ。
1. RabbitMQ简介 RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基于AMQP协议的。
2. RabbitMQ工作流程 RabbitMQ架构图 发布者P-Clients（Publisher）发布消息(Message)，经由交换机X（Exchange） 交换机根据路由规则将收到的消息分发给与该交换机绑定的队列(Queue) 最后RabbitMQ代理（Broker）会将消息投递（Push）给订阅了此队列的消费者(Consumer)，或者消费者按照需求自行获取(Pull)
深入理解：
(1)发布者、交换机、队列、消费者都可以有多个，因为RabbitMQ是基于网络协议AMQP，所以这个过程中发布者，交换机，队列，消费者可以处于不同的设备上。
(2)消息发布者可以给消息指定各种属性（Message Meta-data),一些属性可能被消息代理(Broker)使用，一些只能被消费者使用。消息分两部分：payload(有效载荷，传输的数据)和label(标签,exchange的名字或者说是一个tag，它描述了payload)，RabbitMQ通过label决定把Message发给哪个消费者。AMQP协议仅仅描述了label，RabbitMQ决定了如何使用label的规则。消费者在收到消息时只有payload部分，label已经被删掉，对于消费者而言是不知道谁发送的消息。
(3)从安全和可靠性角度，RabbitMQ很好实现了AMQP协议的消息确认(Message Acknowledgements)机制,当一个消息投递给消费者后，不会立即删除，直到它收到来自消费者的确认回执(Acknowledgements)后,才完成从队列里删除。
3. RabbitMQ基本概念 我们先来看一张RabbitMQ管理界面截图
这个界面包含了RabbitMQ很关键的几个概念(不是全部)
3.1 Producer（生产者） 消息生产者
3.2 Consumer（消费者） 消息消费者
3.3 Connection（连接） 无论是生产者还是消费者，都需要和RabbitMQ Broker建立连接，这个连接就是一条TCP,当不要连接时，需要优雅释放掉RabbitMQ连接,而不是直接将TCP连接关闭。后面我们可以知道使用RabbitMQ程序开头时，都是先建立TCP连接。
3.4 Channel（信道） 一旦TCP连接建立起来，客户端紧接着可以创建一个AMQP信道（Channel），每个信道都会被指派一个唯一的ID。信道是建立在Connection之上的虚拟连接，Rabbit处理的每条指令都是通过Channel完成的。一般情况程序起始建立TCP连接，第二步就是建立Channel。
为什么要用Channel，而不直接用TCP连接？
试想如果一个场景，如果一个应用程序有很多个线程需要从RabbitMQ消费或生产消息，那么必然会创建很多个TCP连接，我们知道建立一个TCP连接需要3次握手,关闭一个TCP连接需4次挥手，对于系统来说频繁建立和关闭TCP连接对于系统性能有很大影响，而且TCP连接数也有限制，也限制了系统处理高并发的能力。 Rabbitmq采用类似NIO(也称非阻塞 I/O，包含三大核心部分：Channel信道、Buffer缓冲区和 Selector选择器)的做法,选择TCP连接复用，每个线程把持一个信道，信道复用了Connection的TCP连接.当每个信道的流量不是很大时，复用单一connection可以有效节省TCP连接资源，但如果信道流量很大，复用单一connection，connection的带宽会限制消息传输。此时需创建多个connection，将信道分摊到connection中。
3.5 Exchange（交换机） 消息交换机指定消息按什么规则，路由到哪个队列去。
那为什么需要Exchange而不是直接将消息发送至队列呢？
回到与RabbitM关系紧密的AMQP协议，AMQP协议核心思想就是生产者和消费者解耦，生产者不直接将消息发送给队列。生产者不知道消息会被发到哪个队列，它只将消息发给交换机，交换机接收到消息后按照特定的规则转发到队列进行存储。 在实际应用中我们只需要定义好Exchange的路由策略，而生产者不需要关心消息发送到哪个队列或被谁消费。消费者不需要关心谁生产，只需面向队列消费消息。
Exchange定义了消息路由到Queue的规则，将各个层面的消息传递隔离开，使每一层只需要关心自己面向的下一层，降低了整体的耦合度。
创建一个新的Exchange
 Virtual host:属于哪个Virtual host。 Name：名字，同一个Virtual host里面的Name不能重复。 Durability： 是否持久化，Durable：持久化。Transient：不持久化。 Auto delete：当最后一个绑定（队列或者exchange）被unbind之后，该exchange自动被删除。 Internal： 是否是内部专用exchange，是的话，就意味着我们不能往该exchange里面发消息。 Arguments： 参数，是AMQP协议留给AMQP实现做扩展使用的。 alternate_exchange配置的时候，exchange根据路由路由不到对应的队列的时候，这时候消息被路由到指定的alternate_exchange的value值配置的exchange上。  3.6 Exchange类型 （1）.Direct exchange
将消息中的Routing key与该Exchange关联的所有Binding中的Routing key进行比较，如果相等，则发送到该Binding对应的Queue中。
（2）.Topic Exchange 将消息中的Routing key与该Exchange关联的所有Binding中的Routing key进行对比，如果匹配上了，则发送到该Binding对应的Queue中。</description>
    </item>
    
  </channel>
</rss>
